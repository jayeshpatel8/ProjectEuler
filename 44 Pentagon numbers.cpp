#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
using namespace std;

#define N_LIMIT (int)1e6

/*
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
***************
 p = n(3n-1)/2
 2p = 3n2 -n 
 3n2 -n -2p = 0 
 a=3, b=-1, c=-2p
 D  = sqrt(1 + 4 *3 *2p) = sqrt(b*2 - 4ac)
 n = (1 + D ) /  2*3 = -b + D / 2a , only positive allwed as p>0 
if n is integer its  pentagon using reverse fn
*/
bool isPentagon(int p){
    double  n = (1 + sqrt(1 + 24*p))/6;
    return (n == (int)n);
}
uint64_t Pentagon_number()
{
	uint64_t pk=0,pj = 0;
    vector<int> Pentagon = {1, 5, 12};
    
    for (int pk=22, n=10; ; n+=3, pk+=n){
        Pentagon.push_back(pk);
        for(int i=0; i<Pentagon.size()-1; i++){
            int diff = pk - Pentagon[i];
            int sum =pk+Pentagon[i];
            if (isPentagon(diff) && isPentagon(sum))
                return diff;

        }
    }
    return 0;
}
 int main()
{    
    cout << "Pentagon numbers diff: " << Pentagon_number() << endl;
    // Problem 44 Pentagon numbers: 5482660
    return 0;
}
